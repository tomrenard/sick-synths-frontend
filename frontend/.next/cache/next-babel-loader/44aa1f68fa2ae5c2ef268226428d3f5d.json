{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/tomrenard/code/tomrenard/sick-fits/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/tomrenard/code/tomrenard/sick-fits/sick-fits/frontend/components/Orders.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query ORDERS_QUERY {\\n    allOrders {\\n      id\\n      total\\n      charge\\n      user {\\n        id\\n      }\\n      items {\\n        id\\n        name\\n        description\\n        price\\n        quantity\\n        photo {\\n          image {\\n            publicUrlTransformed\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport Head from 'next/head';\nimport DisplayError from './ErrorMessage';\nimport OrderStyles from './styles/OrderStyles';\nimport formatMoney from '../lib/formatMoney';\n/* eslint-disable react/prop-types */\n\nvar ORDERS_QUERY = gql(_templateObject());\nexport default function Orders() {\n  _s();\n\n  var _useQuery = useQuery(ORDERS_QUERY),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(DisplayError, {\n    error: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 21\n  }, this);\n  var allOrders = data.allOrders;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"You have \", allOrders.length, \" orders completed\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Orders, \"tP+6C5plfRwxqCbBj3cMUcL7Opk=\", false, function () {\n  return [useQuery];\n});\n\n_c = Orders;\n\nvar _c;\n\n$RefreshReg$(_c, \"Orders\");","map":{"version":3,"sources":["/Users/tomrenard/code/tomrenard/sick-fits/sick-fits/frontend/components/Orders.js"],"names":["useQuery","gql","Head","DisplayError","OrderStyles","formatMoney","ORDERS_QUERY","Orders","data","loading","error","allOrders","length"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AAEA;;AACA,IAAMC,YAAY,GAAGL,GAAH,mBAAlB;AAyBA,eAAe,SAASM,MAAT,GAAkB;AAAA;;AAAA,kBACEP,QAAQ,CAACM,YAAD,CADV;AAAA,MACvBE,IADuB,aACvBA,IADuB;AAAA,MACjBC,OADiB,aACjBA,OADiB;AAAA,MACRC,KADQ,aACRA,KADQ;;AAE/B,MAAID,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO,QAAC,YAAD;AAAc,IAAA,KAAK,EAAEA;AAArB;AAAA;AAAA;AAAA;AAAA,UAAP;AAHoB,MAIvBC,SAJuB,GAITH,IAJS,CAIvBG,SAJuB;AAK/B,sBACE;AAAA,2BACE;AAAA,8BAAcA,SAAS,CAACC,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAVuBL,M;UACWP,Q;;;KADXO,M","sourcesContent":["import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport Head from 'next/head';\nimport DisplayError from './ErrorMessage';\nimport OrderStyles from './styles/OrderStyles';\nimport formatMoney from '../lib/formatMoney';\n\n/* eslint-disable react/prop-types */\nconst ORDERS_QUERY = gql`\n  query ORDERS_QUERY {\n    allOrders {\n      id\n      total\n      charge\n      user {\n        id\n      }\n      items {\n        id\n        name\n        description\n        price\n        quantity\n        photo {\n          image {\n            publicUrlTransformed\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function Orders() {\n  const { data, loading, error } = useQuery(ORDERS_QUERY);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <DisplayError error={error} />;\n  const { allOrders } = data;\n  return (\n    <div>\n      <h2>You have {allOrders.length} orders completed</h2>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}